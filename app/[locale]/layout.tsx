

import type { Metadata } from "next";
import {  Inter, Roboto_Mono } from "next/font/google";
import "./globals.css";
import { ThemeProvider } from "@/components/theme-provider";
import { routing } from "@/i18n/routing";
import { notFound } from "next/navigation";
import { getMessages } from "next-intl/server";
import { NextIntlClientProvider } from "next-intl";
import { AuthProvider } from "@/providers/AuthProvider";
import { Toaster } from "@/components/ui/toaster";
import { QueryProvider } from "@/providers/QueryProvider";

const locales = ["en", "te"];

const geistSans = Inter({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Roboto_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "ORGANIZE",
  description: "Generated by create next app",
};

export default async function RootLayout({
  children,
  params: {locale}
}: Readonly<{
  children: React.ReactNode;
  params: {locale: string};
}>) {

  if (!routing.locales.includes(locale as any)) {
    notFound();
  }

  const isValidLocale = locales.some((cur) => cur === locale)
  if (!isValidLocale) notFound()
 
   //@ts-ignore
  const messages = await getMessages(locales);
  return (
    <html lang={locale}>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <AuthProvider>
          <QueryProvider>
        <ThemeProvider 
                   attribute="class"
                   defaultTheme="system"
                   enableSystem
                   disableTransitionOnChange
                   
                   >
          <NextIntlClientProvider messages={messages}>
          {children}
          <Toaster />
        </NextIntlClientProvider>
        </ThemeProvider>
        </QueryProvider>
      </AuthProvider>
      </body>
    </html>
  );
}
